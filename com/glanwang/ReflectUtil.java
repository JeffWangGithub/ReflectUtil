package com.glanwang;import java.lang.reflect.Field;import java.lang.reflect.Method;public class ReflectUtil {    /**     * @param clazz     * @param method     * @return     */    public static boolean existsMethod(Class<?> clazz, String method) {        boolean exists = false;        if (clazz != null) {            Method[] methods = clazz.getMethods();            for (Method m : methods) {                if (m.getName().equals(method)) {                    exists = true;                    break;                }            }        }        return exists;    }    /**     * 获取某个类声明的Method对象，会依次寻找当前类和其父类，找到则返回     */    public static Method getDeclaredMethod(Class<?> clazz, String methodName,                                           Class<?>... parameterTypes) {        if(clazz != null){            //从当前类开始寻找，依次想其父类开始寻找，知道找到为止            for (; Object.class != clazz; clazz = clazz.getSuperclass()){                try {                    Method declaredMethod = clazz.getDeclaredMethod(methodName, parameterTypes);                    if(declaredMethod != null){                        declaredMethod.setAccessible(true);                        return declaredMethod;                    }                } catch (NoSuchMethodException e) {                    e.printStackTrace();                }            }        }        return null;    }    private static Field getDeclaredField(Class<?> clazz, String fieldName) {        if (clazz != null) {                Field field = null;                for (; clazz != Object.class; clazz = clazz.getSuperclass()) {                    try {                        field = clazz.getDeclaredField(fieldName);                        field.setAccessible(true);                        return field;                    } catch (Exception e) {                    }                }        }        return null;    }    /**     * 设置fieldValue，一般用作设置非静态字段的value     * @param object     * @param fieldName     * @param value     * @throws Exception     */    public static void setFieldValue(Object object, String fieldName,                                     Object value) throws Exception {        Field field = getDeclaredField(object.getClass(), fieldName);        if (field != null) {            field.set(object, value);        } else {            throw new Exception("setFieldValue fail");        }    }    /**     * 根据Object对象获取Object中的fieldValue，一般用作获取非静态字段     * @param object     * @param fieldName     * @return     * @throws Exception     */    public static Object getFieldValue(Object object, String fieldName)            throws Exception {        Field field = getDeclaredField(object.getClass(), fieldName);        if (field != null) {            return field.get(object);        } else {            throw new Exception("getFieldValue fail");        }    }    /**     * 设置fieldValue，一般用作设置静态字段的value     * @param clazz     * @param fieldName     * @param value     * @throws Exception     */    public static void setFieldValue(Class<?> clazz, String fieldName,                                     Object value) throws Exception {        Field field = getDeclaredField(clazz, fieldName);        if (field != null) {            field.set(null, value);        } else {            throw new Exception(fieldName+" fail");        }    }    /**     * 根据class对象获取class中的fieldValue，一般用作获取静态字段     * @param clazz     * @param fieldName     * @return     * @throws Exception     */    public static Object getFieldValue(Class<?> clazz, String fieldName)            throws Exception {        Field field = getDeclaredField(clazz, fieldName);        if (field != null) {            return field.get(null);        }        throw new Exception("getFieldValue fail");    }    /**     * 反射调用某个对象的方法， object参数不能为空，一般用作调用对象的非静态方法     * @param object     * @param methodName     * @param parameterTypes     * @param paramValues     * @return     * @throws Exception     */    public static Object invokeMethod(Object object, String methodName,                                      Class<?>[] parameterTypes, Object[] paramValues) throws Exception {        Method method = getDeclaredMethod(object.getClass(), methodName,                parameterTypes);        if (method != null) {            return method.invoke(object, paramValues);        }        throw new Exception("invoke method fail");    }    /**     * 通过Class对象反射调用某个方法，一般用作调用类的静态方法，例如静态私有方法     * @param clazz     * @param methodName     * @param parameterTypes     * @param paramValues     * @return     * @throws Exception     */    public static Object invokeStaticMethodByClazz(Class<?> clazz, String methodName,                                      Class<?>[] parameterTypes, Object[] paramValues) throws Exception {        Method method = getDeclaredMethod(clazz, methodName, parameterTypes);        if (method != null) {            return method.invoke(null, paramValues);        }        throw new Exception("invoke method fail");    }    public static void copyField(Object src, Object dst) {        try {            Class<?> cls = src.getClass();            Field[] fs = cls.getDeclaredFields();            for (Field field : fs) {                field.setAccessible(true);                Object value = field.get(src);                field.set(dst, value);            }        } catch (Exception e) {            e.printStackTrace();        }    }    /**     * 获取父类的方法     */    public static Method getSuperMethod(Class<?> currentClazz, String methodName, Class<?>... parameterTypes){        if(currentClazz != null && currentClazz.getSuperclass() != Object.class){            for(currentClazz = currentClazz.getSuperclass(); Object.class != currentClazz ; currentClazz = currentClazz.getSuperclass()){                try {                    Method declaredMethod = currentClazz.getDeclaredMethod(methodName, parameterTypes);                    if(declaredMethod != null){                        declaredMethod.setAccessible(true);                        return declaredMethod;                    }                } catch (NoSuchMethodException e) {                    e.printStackTrace();                }            }        }        return null;    }    /**     * 调用当前对象父类的方法，即super方法     */    public static Object invokeSuperMethod(Object currentObject, String methodName, Class<?>... parameterTypes) throws Exception {        if(currentObject != null){            Method superMethod = getSuperMethod(currentObject.getClass(), methodName, parameterTypes);            if(superMethod != null){                superMethod.setAccessible(true);                return  superMethod.invoke(currentObject, parameterTypes);            }        }        throw new Exception("invoke method fail");    }}