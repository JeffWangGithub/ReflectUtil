package com.glanwang;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.util.HashMap;public class ReflectUtil {    private static HashMap<String, Method> methodCache = new HashMap<String, Method>();    private static HashMap<String, Field> fieldCache = new HashMap<String, Field>();    static {        try {// 未引用的方法不给混淆 所以这里就自己调用下让给混淆了            getDeclaredField(Object.class, null);            getFieldValue("", null);            getFieldValue(Object.class, null);            setFieldValue(Object.class, null, null);            setFieldValue("", null, null);            getDeclaredMethod(Object.class, null);            invokeStaticMethodByClazz(Object.class, null, null, null);            invokeMethod("", null, null, null);        } catch (Exception e) {        }    }    public static boolean existsMethod(Class<?> clazz, String method) {        boolean exists = false;        if (clazz != null) {            Method[] methods = clazz.getMethods();            for (Method m : methods) {                if (m.getName().equals(method)) {                    exists = true;                    break;                }            }        }        return exists;    }    /**     * 根据class对象获取方法     * @param clazz     * @param methodName     * @param parameterTypes     * @return     */    public static Method getDeclaredMethod(Class<?> clazz, String methodName,                                           Class<?>... parameterTypes) {        if (clazz != null) {            StringBuffer stringBuffer = new StringBuffer();            stringBuffer.append(clazz.getName());            stringBuffer.append(methodName);            for (Class<?> cls : parameterTypes) {                if (cls != null) {                    stringBuffer.append(cls.getName());                } else {                    stringBuffer.append("null");                }            }            String key = stringBuffer.toString();            if (methodCache.containsKey(key)) {                return methodCache.get(key);            } else {                Method method = null;                for (; clazz != Object.class; clazz = clazz.getSuperclass()) {                    try {                        method = clazz.getDeclaredMethod(methodName,                                parameterTypes);                        method.setAccessible(true);                        methodCache.put(key, method);                        return method;                    } catch (Exception e) {                    }                }            }        }        return null;    }    private static Field getDeclaredField(Class<?> clazz, String fieldName) {        if (clazz != null) {            StringBuffer stringBuffer = new StringBuffer();            stringBuffer.append(clazz.getName());            stringBuffer.append(fieldName);            String key = stringBuffer.toString();            if (fieldCache.containsKey(key)) {                return fieldCache.get(key);            } else {                Field field = null;                for (; clazz != Object.class; clazz = clazz.getSuperclass()) {                    try {                        field = clazz.getDeclaredField(fieldName);                        field.setAccessible(true);                        fieldCache.put(key, field);                        return field;                    } catch (Exception e) {                    }                }            }        }        return null;    }    /**     * 设置fieldValue，一般用作设置非静态字段的value     * @param object     * @param fieldName     * @param value     * @throws Exception     */    public static void setFieldValue(Object object, String fieldName,                                     Object value) throws Exception {        Field field = getDeclaredField(object.getClass(), fieldName);        if (field != null) {            field.set(object, value);        } else {            throw new Exception("setFieldValue fail");        }    }    /**     * 根据Object对象获取Object中的fieldValue，一般用作获取非静态字段     * @param object     * @param fieldName     * @return     * @throws Exception     */    public static Object getFieldValue(Object object, String fieldName)            throws Exception {        Field field = getDeclaredField(object.getClass(), fieldName);        if (field != null) {            return field.get(object);        } else {            throw new Exception("getFieldValue fail");        }    }    /**     * 设置fieldValue，一般用作设置静态字段的value     * @param clazz     * @param fieldName     * @param value     * @throws Exception     */    public static void setFieldValue(Class<?> clazz, String fieldName,                                     Object value) throws Exception {        Field field = getDeclaredField(clazz, fieldName);        if (field != null) {            field.set(null, value);        } else {            throw new Exception(fieldName+" fail");        }    }    /**     * 根据class对象获取class中的fieldValue，一般用作获取静态字段     * @param clazz     * @param fieldName     * @return     * @throws Exception     */    public static Object getFieldValue(Class<?> clazz, String fieldName)            throws Exception {        Field field = getDeclaredField(clazz, fieldName);        if (field != null) {            return field.get(null);        }        throw new Exception("getFieldValue fail");    }    /**     * 反射调用某个对象的方法， object参数不能为空，一般用作调用对象的非静态方法     * @param object     * @param methodName     * @param parameterTypes     * @param paramValues     * @return     * @throws Exception     */    public static Object invokeMethod(Object object, String methodName,                                      Class<?>[] parameterTypes, Object[] paramValues) throws Exception {        Method method = getDeclaredMethod(object.getClass(), methodName,                parameterTypes);        if (method != null) {            return method.invoke(object, paramValues);        }        throw new Exception("invoke method fail");    }    /**     * 通过Class对象反射调用某个方法，一般用作调用类的静态方法，例如静态私有方法     * @param clazz     * @param methodName     * @param parameterTypes     * @param paramValues     * @return     * @throws Exception     */    public static Object invokeStaticMethodByClazz(Class<?> clazz, String methodName,                                      Class<?>[] parameterTypes, Object[] paramValues) throws Exception {        Method method = getDeclaredMethod(clazz, methodName, parameterTypes);        if (method != null) {            return method.invoke(null, paramValues);        }        throw new Exception("invoke method fail");    }    public static void copyField(Object src, Object dst) {        try {            Class<?> cls = src.getClass();            Field[] fs = cls.getDeclaredFields();            for (Field field : fs) {                field.setAccessible(true);                Object value = field.get(src);                field.set(dst, value);            }        } catch (Exception e) {            e.printStackTrace();        }    }    /**     * 清理缓存的反射方法和反射字段     */    public static void cleanCache() {        methodCache.clear();        fieldCache.clear();    }}